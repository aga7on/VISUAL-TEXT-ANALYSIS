# -*- coding: utf-8 -*-
"""
üñºÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
"""

import os
import json
import time
import base64
import streamlit as st
import requests
import asyncio
import shutil
from jinja2 import Environment, FileSystemLoader
from typing import List, Dict, Optional

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
try:
    from image_utils import search_images, download_images_async, extract_urls_from_text, search_images_from_urls
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ image_utils: {e}")
    st.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt")
    st.stop()

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
SETTINGS_FILE = "settings.json"
CUSTOM_PROMPTS_FILE = "custom_prompts.json"
HISTORY_FILE = "history.json"
TEMPLATE_DIR = "templates"
HTML_OUT = "output.html"
IMAGES_DIR = "saved_images"
USED_IMAGES_DIR = "used_in_davinci"

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
os.makedirs(IMAGES_DIR, exist_ok=True)
os.makedirs(USED_IMAGES_DIR, exist_ok=True)
os.makedirs(TEMPLATE_DIR, exist_ok=True)

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ===
DEFAULT_SETTINGS = {
    "llm_url": "http://localhost:1234/v1/chat/completions",
    "llm_model": "local-llm",
    "image_count": 4,
    "search_engine": "duckduckgo",
    "search_language": "auto",
    "url_parsing": True,
    "system_prompt": "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–º–∞–∫—Å–∏–º—É–º 3 —Å–ª–æ–≤–∞ –∫–∞–∂–¥—ã–π) –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É. –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.",
    "split_long_paragraphs": False,
    "smart_queries": True,
    "searxng_url": "http://localhost:8080",
    "duckduckgo_count": 3,
    "pixabay_count": 3,
    "pinterest_count": 3
}

DEFAULT_PROMPTS = {
    "–ó–ê–ü–†–û–°–û–í –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô": "üîç –¢–´ ‚Äî –≠–ö–°–ü–ï–†–¢ –ü–û –°–û–ó–î–ê–ù–ò–Æ –ü–û–ò–°–ö–û–í–´–• –ó–ê–ü–†–û–°–û–í –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô\n\nüéØ –ó–ê–î–ê–ß–ê:\n–ü—Ä–æ—á–∏—Ç–∞–π —Ç–µ–∫—Å—Ç. –ù–∞–π–¥–∏ –≤ –Ω—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞–π –ø–æ –æ–¥–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–π.\n–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Ç–µ–º—É: –ø–æ–¥—É–º–∞–π, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏ —ç—Ç–æ –≤ —á—ë—Ç–∫–∏–π, –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å.\n\nüß† –ö–ê–ö –î–£–ú–ê–¢–¨ –û –ö–ê–ñ–î–û–ô –¢–ï–ú–ï:\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n    –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?\n    –ö—Ç–æ –∏–ª–∏ —á—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç?\n    –ì–¥–µ –∏ –≤ –∫–∞–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ?\n\n‚úÖ –ü–†–ê–í–ò–õ–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ü–†–û–°–û–í:\n- –ú–∞–∫—Å–∏–º—É–º 5 —Å–ª–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ\n- –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ\n- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, –∞ –Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏\n- –í–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º—ã–µ –ø–æ–Ω—è—Ç–∏—è\n- –ë–ï–ó –Ω—É–º–µ—Ä–∞—Ü–∏–∏, –ë–ï–ó –∫–∞–≤—ã—á–µ–∫, –ë–ï–ó –æ–±—ä—è—Å–Ω–µ–Ω–∏–π\n\nüéØ –¶–ï–õ–¨: –°–æ–∑–¥–∞—Ç—å 3-8 –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É—é—â–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞.",
    "–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞": "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É. –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º—É–º 3 —Å–ª–æ–≤–∞, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ."
}

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ===
def load_settings() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                settings = json.load(f)
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                for key, value in DEFAULT_SETTINGS.items():
                    if key not in settings:
                        settings[key] = value
                return settings
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    return DEFAULT_SETTINGS.copy()

def save_settings(settings: Dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def load_custom_prompts() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    try:
        if os.path.exists(CUSTOM_PROMPTS_FILE):
            with open(CUSTOM_PROMPTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
    
    return DEFAULT_PROMPTS.copy()

def save_custom_prompts(prompts: Dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    try:
        with open(CUSTOM_PROMPTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(prompts, f, ensure_ascii=False, indent=2)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ò–°–¢–û–†–ò–ï–ô ===
def load_history() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    return []

def save_to_history(text: str, paragraphs_count: int, images_count: int, search_engine: str, language: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    try:
        history = load_history()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        entry = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "text_preview": text[:100] + "..." if len(text) > 100 else text,
            "paragraphs_count": paragraphs_count,
            "images_count": images_count,
            "search_engine": search_engine,
            "language": language
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        history.insert(0, entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 50 –∑–∞–ø–∏—Å—è–º–∏
        history = history[:50]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° LLM ===
def ask_llm(prompt: str, system: str, llm_url: str, model: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ LLM —Å–µ—Ä–≤–µ—Ä—É"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º URL
        if not llm_url.endswith('/v1/chat/completions'):
            llm_url = llm_url.rstrip('/') + '/v1/chat/completions'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        base_url = llm_url.replace('/v1/chat/completions', '')
        try:
            health_response = requests.get(f"{base_url}/health", timeout=5)
        except:
            try:
                health_response = requests.get(f"{base_url}/v1/models", timeout=5)
            except:
                pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        data = {
            "model": model,
            "messages": [
                {"role": "system", "content": system},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 200
        }
        
        response = requests.post(llm_url, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if 'choices' in result and len(result['choices']) > 0:
                return result['choices'][0]['message']['content'].strip()
        
        return ""
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: {e}")
        return ""

def generate_smart_queries(paragraph: str, settings: Dict) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ LLM"""
    try:
        system_prompt = settings.get("system_prompt", DEFAULT_SETTINGS["system_prompt"])
        
        user_prompt = f"–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{paragraph}\n\n–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É."
        
        response = ask_llm(
            prompt=user_prompt,
            system=system_prompt,
            llm_url=settings["llm_url"],
            model=settings["llm_model"]
        )
        
        if not response:
            return []
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
        if settings.get("debug_mode", False):
            st.write(f"üîç **–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç LLM:** `{response}`")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å —Ç–µ–≥–∞–º–∏ <think>
        cleaned_response = clean_llm_response(response)
        
        if settings.get("debug_mode", False):
            st.write(f"üßπ **–û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:** `{cleaned_response}`")
            st.write(f"üìè **–î–ª–∏–Ω–∞ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:** {len(cleaned_response)}")
            if not cleaned_response:
                st.error("‚ö†Ô∏è –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π!")
        
        if not cleaned_response:
            return []
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        queries = []
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        if '|' in cleaned_response:
            queries = [q.strip() for q in cleaned_response.split('|')]
        else:
            queries = [q.strip() for q in cleaned_response.split('\n')]
        
        # –û—á–∏—â–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
        clean_queries = []
        for query in queries:
            query = query.strip()
            # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            query = query.lstrip('0123456789.- ')
            query = query.strip('"\'`')
            
            if query and len(query) > 2 and not query.startswith('<'):
                clean_queries.append(query)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        if settings.get("debug_mode", False):
            st.write(f"üéØ **–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤:** {len(clean_queries)}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            total_images = settings.get("image_count", 4)
            if isinstance(total_images, dict):
                # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
                total_images = sum(v for k, v in total_images.items() if k.endswith('_count'))
                st.write(f"üìä **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** {settings['image_count']} (–≤—Å–µ–≥–æ: {total_images})")
            else:
                st.write(f"üìä **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** {total_images} –æ–±—â–∏—Ö")
            
            if len(clean_queries) > 0 and isinstance(total_images, int):
                per_query = total_images // len(clean_queries)
                remainder = total_images % len(clean_queries)
                st.write(f"üìà **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:** {per_query} –Ω–∞ –∑–∞–ø—Ä–æ—Å + {remainder} –æ—Å—Ç–∞—Ç–æ–∫")
            
            for i, q in enumerate(clean_queries, 1):
                st.write(f"   {i}. `{q}`")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        return clean_queries
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        return []

def clean_llm_response(response: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç LLM –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–µ–≥–æ–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    try:
        import re
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º —Ç–µ–≥–æ–º think
        if 'think' in response.lower():
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã think (—Å —Ç–µ–≥–∞–º–∏ –∏–ª–∏ –±–µ–∑)
            if '<think>' in response and '</think>' in response:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Ç–µ–≥–∞–º–∏
                response = re.sub(r'<think>.*?</think>', '', response, flags=re.DOTALL)
            elif 'think' in response.lower():
                # –°–ª—É—á–∞–π —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º think –∏–ª–∏ /think
                # –ò—â–µ–º –≤—Å–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è think –∏–ª–∏ /think
                think_patterns = ['/think', 'think']
                last_think_pos = -1
                
                for pattern in think_patterns:
                    pos = response.lower().rfind(pattern)
                    if pos > last_think_pos:
                        last_think_pos = pos
                
                if last_think_pos != -1:
                    # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ think/think
                    after_think = response[last_think_pos:]
                    # –£–±–∏—Ä–∞–µ–º —Å–∞–º –ø–∞—Ç—Ç–µ—Ä–Ω think
                    after_think = re.sub(r'^[/]?think\s*', '', after_think, flags=re.IGNORECASE)
                    response = after_think.strip()
        
        # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è XML-–ø–æ–¥–æ–±–Ω—ã–µ —Ç–µ–≥–∏
        response = re.sub(r'<[^>]+>', '', response)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        response = response.strip()
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–±–æ–ª—å—à–µ 500 —Å–∏–º–≤–æ–ª–æ–≤), —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        if len(response) > 500:
            # –ò—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ - –æ–Ω–∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å—ã
            lines = response.split('\n')
            short_lines = []
            
            # –ë–µ—Ä–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ–Ω—Ü–∞, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ—Ä–æ—á–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
            for line in reversed(lines):
                line = line.strip()
                if line and len(line) < 50 and len(line) > 5:
                    short_lines.insert(0, line)
                    if len(short_lines) >= 6:  # –ú–∞–∫—Å–∏–º—É–º 6 –∑–∞–ø—Ä–æ—Å–æ–≤
                        break
            
            if short_lines:
                response = '\n'.join(short_lines)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º –∫–∞–∂–¥—É—é
        lines = response.split('\n')
        clean_lines = []
        
        for line in lines:
            line = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not line:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è (–±–æ–ª—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(line) > 50:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
            if line.startswith(('–í–æ—Ç', '–î–ª—è', '–Ø —Å–æ–∑–¥–∞–ª', '–°–æ–∑–¥–∞–ª', '–ê–Ω–∞–ª–∏–∑', '–¢–µ–∫—Å—Ç', '–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã', '–ó–∞–ø—Ä–æ—Å—ã', '–•–º,', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')):
                continue
                
            # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏ –º–∞—Ä–∫–µ—Ä—ã
            line = re.sub(r'^[\d\.\-\‚Ä¢\*\s]+', '', line).strip()
            
            # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            line = line.strip('"\'`')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
            if line and 5 <= len(line) <= 50 and not line.startswith('<'):
                clean_lines.append(line)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        if clean_lines:
            return '\n'.join(clean_lines)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–µ–≥–æ–≤
        return response
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM: {e}")
        return response

# === –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê ===
def split_text_into_paragraphs(text: str, split_long: bool = False) -> List[str]:
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–±–∑–∞—Ü—ã"""
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
    paragraphs = [p.strip() for p in text.split('\n\n') if p.strip()]
    
    if not paragraphs:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–≤–æ–π–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –æ–¥–∏–Ω–∞—Ä–Ω—ã–º
        paragraphs = [p.strip() for p in text.split('\n') if p.strip()]
    
    if split_long:
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã (–±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
        split_paragraphs = []
        for p in paragraphs:
            if len(p) > 500:
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = p.split('. ')
                current_chunk = ""
                
                for sentence in sentences:
                    if len(current_chunk + sentence) < 500:
                        current_chunk += sentence + ". "
                    else:
                        if current_chunk:
                            split_paragraphs.append(current_chunk.strip())
                        current_chunk = sentence + ". "
                
                if current_chunk:
                    split_paragraphs.append(current_chunk.strip())
            else:
                split_paragraphs.append(p)
        
        paragraphs = split_paragraphs
    
    return paragraphs

def process_paragraph(paragraph: str, settings: Dict) -> Dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞"""
    result = {
        "text": paragraph,
        "queries": [],
        "images": [],
        "url_images": []
    }
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if settings["smart_queries"]:
            # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ query_count - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç LLM
            queries = generate_smart_queries(paragraph, settings)
        else:
            # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –∞–±–∑–∞—Ü–∞)
            words = paragraph.split()[:3]
            queries = [" ".join(words)] if words else []
        
        result["queries"] = queries
        
        # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
        all_images = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –∑–∞–ø—Ä–æ—Å
        if len(queries) > 0:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            total_images = settings.get("image_count", 4)
            if isinstance(total_images, dict):
                # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                images_per_query = 1  # –ú–∏–Ω–∏–º—É–º 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å
                remainder = 0
            else:
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                images_per_query = max(1, total_images // len(queries))
                # –ï—Å–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Å—Ç–∞—Ç–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –ø–µ—Ä–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
                remainder = total_images % len(queries)
        else:
            images_per_query = 1
            remainder = 0
        
        for i, query in enumerate(queries):
            if query:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                current_count = images_per_query
                if i < remainder:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∫ –ø–µ—Ä–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
                    current_count += 1
                
                if settings.get("debug_mode", False):
                    st.write(f"üîç **–ó–∞–ø—Ä–æ—Å {i+1}:** `{query}` (–∏—â–µ–º {current_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
                if isinstance(settings["search_engine"], list):
                    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    engine_images = {}
                    for engine in settings["search_engine"]:
                        engine_count = settings.get(f"{engine}_count", 3)
                        # –í –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞
                        engine_images[engine] = engine_count
                    
                    # –ü–æ–∏—Å–∫ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    for engine in settings["search_engine"]:
                        engine_count = engine_images.get(engine, 1)
                        
                        if settings.get("debug_mode", False):
                            st.write(f"   üîç {engine}: –∏—â–µ–º {engine_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                        
                        images = search_images(
                            query=query,
                            max_results=engine_count,
                            search_engine=engine,
                            searxng_url=settings.get("searxng_url", "http://localhost:8080")
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        for img in images:
                            img["query"] = query
                            img["search_engine"] = engine
                        
                        all_images.extend(images)
                else:
                    # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
                    images = search_images(
                        query=query,
                        max_results=current_count,
                        search_engine=settings["search_engine"],
                        searxng_url=settings.get("searxng_url", "http://localhost:8080")
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    for img in images:
                        img["query"] = query
                        img["search_engine"] = settings["search_engine"]
                    
                    all_images.extend(images)
        
        result["images"] = all_images
        
        # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ URL (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if settings["url_parsing"]:
            url_images = search_images_from_urls(paragraph, max_images_per_url=2)
            result["url_images"] = url_images
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–±–∑–∞—Ü–∞: {e}")
    
    return result

# === –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –û–¢–ß–ï–¢–û–í ===
def create_html_report(results: List[Dict], settings: Dict) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        template_path = os.path.join(TEMPLATE_DIR, "report.html")
        if not os.path.exists(template_path):
            create_default_template()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        env = Environment(loader=FileSystemLoader(TEMPLATE_DIR))
        template = env.get_template("report.html")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        total_images = sum(len(r["images"]) + len(r["url_images"]) for r in results)
        
        # –†–µ–Ω–¥–µ—Ä–∏–º HTML
        html_content = template.render(
            results=results,
            settings=settings,
            total_paragraphs=len(results),
            total_images=total_images,
            generation_time=time.strftime("%Y-%m-%d %H:%M:%S")
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(HTML_OUT, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return HTML_OUT
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML –æ—Ç—á–µ—Ç–∞: {e}")
        return ""

def create_default_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ HTML —à–∞–±–ª–æ–Ω–∞"""
    template_content = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
        .header { background: #f4f4f4; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .paragraph { margin-bottom: 30px; border: 1px solid #ddd; padding: 15px; border-radius: 8px; }
        .text { background: #f9f9f9; padding: 10px; border-radius: 4px; margin-bottom: 15px; }
        .queries { margin-bottom: 15px; }
        .query-tag { background: #007bff; color: white; padding: 4px 8px; border-radius: 4px; margin: 2px; display: inline-block; font-size: 12px; }
        .images { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 15px; }
        .image-item { border: 1px solid #ddd; border-radius: 8px; overflow: hidden; }
        .image-item img { width: 100%; height: 150px; object-fit: cover; }
        .image-meta { padding: 10px; font-size: 12px; background: #f8f9fa; }
        .stats { background: #e9ecef; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üñºÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞</h1>
        <div class="stats">
            <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong> 
            {{ total_paragraphs }} –∞–±–∑–∞—Ü–µ–≤, {{ total_images }} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π | 
            –ü–æ–∏—Å–∫–æ–≤–∏–∫: {{ settings.search_engine }} | 
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {{ generation_time }}
        </div>
    </div>

    {% for result in results %}
    <div class="paragraph">
        <div class="text">{{ result.text }}</div>
        
        {% if result.queries %}
        <div class="queries">
            <strong>üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</strong>
            {% for query in result.queries %}
            <span class="query-tag">{{ query }}</span>
            {% endfor %}
        </div>
        {% endif %}
        
        {% if result.images %}
        <div class="images">
            {% for image in result.images %}
            <div class="image-item">
                <img src="{{ image.url }}" alt="{{ image.title }}" loading="lazy">
                <div class="image-meta">
                    <strong>–ó–∞–ø—Ä–æ—Å:</strong> {{ image.query }}<br>
                    <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {{ image.search_engine }}<br>
                    {% if image.title %}<strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {{ image.title }}{% endif %}
                </div>
            </div>
            {% endfor %}
        </div>
        {% endif %}
    </div>
    {% endfor %}
</body>
</html>"""
    
    template_path = os.path.join(TEMPLATE_DIR, "report.html")
    with open(template_path, 'w', encoding='utf-8') as f:
        f.write(template_content)

# === –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(
        page_title="üñºÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞",
        page_icon="üñºÔ∏è",
        layout="wide"
    )
    
    st.title("üñºÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
    st.markdown("*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò*")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if 'settings' not in st.session_state:
        st.session_state.settings = load_settings()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
        st.subheader("ü§ñ LLM –°–µ—Ä–≤–µ—Ä")
        llm_url = st.text_input(
            "URL —Å–µ—Ä–≤–µ—Ä–∞",
            value=st.session_state.settings["llm_url"],
            help="–ù–∞–ø—Ä–∏–º–µ—Ä: http://localhost:1234"
        )
        
        llm_model = st.text_input(
            "–ú–æ–¥–µ–ª—å",
            value=st.session_state.settings["llm_model"],
            help="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ LLM"
        )
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
        st.subheader("üß† –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è LLM")
        prompts = load_custom_prompts()
        
        selected_prompt = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç",
            options=list(prompts.keys()),
            help="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        current_prompt = prompts.get(selected_prompt, DEFAULT_SETTINGS["system_prompt"])
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏
        col1, col2 = st.columns([3, 1])
        with col1:
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if st.checkbox("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç"):
                edited_prompt = st.text_area(
                    "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
                    value=current_prompt,
                    height=150,
                    help="–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
                )
                
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç"):
                    prompts[selected_prompt] = edited_prompt
                    save_custom_prompts(prompts)
                    st.success("–ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                    st.rerun()
            else:
                edited_prompt = current_prompt
        
        with col2:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            if st.button("‚ûï –ù–æ–≤—ã–π"):
                new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:", key="new_prompt_name")
                if new_name and st.button("–°–æ–∑–¥–∞—Ç—å", key="create_prompt"):
                    prompts[new_name] = "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É."
                    save_custom_prompts(prompts)
                    st.success(f"–ü—Ä–æ–º–ø—Ç '{new_name}' —Å–æ–∑–¥–∞–Ω!")
                    st.rerun()
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            if len(prompts) > 1 and st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"):
                if st.button(f"–£–¥–∞–ª–∏—Ç—å '{selected_prompt}'?", key="confirm_delete"):
                    del prompts[selected_prompt]
                    save_custom_prompts(prompts)
                    st.success(f"–ü—Ä–æ–º–ø—Ç '{selected_prompt}' —É–¥–∞–ª–µ–Ω!")
                    st.rerun()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
        st.subheader("üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤
        search_mode = st.radio(
            "–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞",
            options=["–û–¥–∏–Ω –ø–æ–∏—Å–∫–æ–≤–∏–∫", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä", "SearXNG —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        )
        
        if search_mode == "–û–¥–∏–Ω –ø–æ–∏—Å–∫–æ–≤–∏–∫":
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è selectbox
            current_engine = st.session_state.settings.get("search_engine", "duckduckgo")
            if isinstance(current_engine, list):
                current_engine = current_engine[0] if current_engine else "duckduckgo"
            
            available_engines = ["duckduckgo", "pixabay", "pinterest", "searxng"]
            try:
                default_index = available_engines.index(current_engine)
            except ValueError:
                default_index = 0
            
            search_engine = st.selectbox(
                "–ü–æ–∏—Å–∫–æ–≤–∏–∫",
                options=available_engines,
                index=default_index
            )
        elif search_mode == "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä":
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è multiselect
            current_engines = st.session_state.settings.get("search_engine", ["duckduckgo", "pixabay"])
            if isinstance(current_engines, str):
                current_engines = [current_engines]
            elif not isinstance(current_engines, list):
                current_engines = ["duckduckgo", "pixabay"]
            
            search_engines = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∏",
                options=["duckduckgo", "pixabay", "pinterest", "searxng"],
                default=current_engines,
                help="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∏–∑ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤"
            )
            search_engine = search_engines if search_engines else ["duckduckgo"]
        else:  # SearXNG —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π
            search_engine = "searxng"
            searxng_url = st.text_input(
                "URL SearXNG —Å–µ—Ä–≤–µ—Ä–∞",
                value=st.session_state.settings.get("searxng_url", "http://localhost:8080"),
                help="URL –≤–∞—à–µ–≥–æ SearXNG —Å–µ—Ä–≤–µ—Ä–∞"
            )
        
        # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç LLM
        st.info("üí° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ LLM")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if search_mode == "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä" and isinstance(search_engine, list):
            st.markdown("**üéØ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞:**")
            engine_counts = {}
            total_images = 0
            
            for engine in search_engine:
                count = st.slider(
                    f"{engine.title()}",
                    min_value=1,
                    max_value=10,
                    value=st.session_state.settings.get(f"{engine}_count", 3),
                    key=f"count_{engine}"
                )
                engine_counts[f"{engine}_count"] = count
                total_images += count
            
            st.info(f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
            image_count = engine_counts
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
            default_count = st.session_state.settings.get("image_count", 4)
            if isinstance(default_count, dict):
                default_count = 4  # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å–ª–æ–≤–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            image_count = st.number_input(
                "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                min_value=1,
                max_value=100,
                value=default_count,
                step=1,
                help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
        smart_queries = st.checkbox(
            "–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
            value=st.session_state.settings["smart_queries"]
        )
        
        url_parsing = st.checkbox(
            "–ü–∞—Ä—Å–∏–Ω–≥ URL –∏–∑ —Ç–µ–∫—Å—Ç–∞",
            value=st.session_state.settings["url_parsing"]
        )
        
        split_long = st.checkbox(
            "–†–∞–∑–¥–µ–ª—è—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã",
            value=st.session_state.settings["split_long_paragraphs"]
        )
        
        debug_mode = st.checkbox(
            "üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ LLM",
            value=st.session_state.settings.get("debug_mode", False),
            help="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—ã—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç LLM –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        new_settings = {
            "llm_url": llm_url,
            "llm_model": llm_model,
            "search_engine": search_engine,
            "image_count": image_count,
            "smart_queries": smart_queries,
            "url_parsing": url_parsing,
            "split_long_paragraphs": split_long,
            "debug_mode": debug_mode,
            "system_prompt": edited_prompt,
            "search_language": st.session_state.settings["search_language"],
            "searxng_url": searxng_url if search_mode == "SearXNG —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π" else st.session_state.settings.get("searxng_url", "http://localhost:8080")
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤
        if isinstance(image_count, dict):
            new_settings.update(image_count)
        
        if new_settings != st.session_state.settings:
            st.session_state.settings = new_settings
            save_settings(new_settings)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üìù –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
        text_input = st.text_area(
            "–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            height=300,
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏..."
        )
        
        if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", type="primary", disabled=not text_input):
            if not text_input.strip():
                st.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã
            paragraphs = split_text_into_paragraphs(
                text_input, 
                st.session_state.settings["split_long_paragraphs"]
            )
            
            if not paragraphs:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
            if 'processing_results' not in st.session_state:
                st.session_state.processing_results = []
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.session_state.processing_results = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–±–∑–∞—Ü –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            progress_bar = st.progress(0)
            status_text = st.empty()
            results_container = st.container()
            
            for i, paragraph in enumerate(paragraphs):
                status_text.text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–±–∑–∞—Ü {i+1} –∏–∑ {len(paragraphs)}...")
                progress_bar.progress((i + 1) / len(paragraphs))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–±–∑–∞—Ü
                result = process_paragraph(paragraph, st.session_state.settings)
                result['paragraph_index'] = i
                st.session_state.processing_results.append(result)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
                with results_container:
                    display_paragraph_result(result, i, st.session_state.settings)
            
            results = st.session_state.processing_results
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            total_images = sum(len(r["images"]) + len(r["url_images"]) for r in results)
            save_to_history(
                text_input,
                len(paragraphs),
                total_images,
                st.session_state.settings["search_engine"],
                st.session_state.settings["search_language"]
            )
            
            # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
            html_file = create_html_report(results, st.session_state.settings)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(paragraphs)} –∞–±–∑–∞—Ü–µ–≤, –Ω–∞–π–¥–µ–Ω–æ {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            if html_file and os.path.exists(html_file):
                with open(html_file, 'r', encoding='utf-8') as f:
                    html_content = f.read()
                
                st.download_button(
                    label="üìÑ –°–∫–∞—á–∞—Ç—å HTML –æ—Ç—á–µ—Ç",
                    data=html_content,
                    file_name=f"visual_analysis_{int(time.time())}.html",
                    mime="text/html"
                )
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã—à–µ
            status_text.text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            progress_bar.progress(1.0)
    
    with col2:
        st.header("üìä –ò—Å—Ç–æ—Ä–∏—è")
        history = load_history()
        
        if history:
            for entry in history[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
                with st.expander(f"üìÖ {entry['timestamp']}"):
                    st.text(f"–¢–µ–∫—Å—Ç: {entry['text_preview']}")
                    st.text(f"–ê–±–∑–∞—Ü–µ–≤: {entry['paragraphs_count']}")
                    st.text(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {entry['images_count']}")
                    st.text(f"–ü–æ–∏—Å–∫–æ–≤–∏–∫: {entry['search_engine']}")
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            try:
                if os.path.exists(HISTORY_FILE):
                    os.remove(HISTORY_FILE)
                st.success("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def display_paragraph_result(result: Dict, index: int, settings: Dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–±–∑–∞—Ü–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–ó–∞–Ω–æ–≤–æ'"""
    with st.expander(f"üìÑ –ê–±–∑–∞—Ü {index+1} ({len(result['images'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)", expanded=True):
        col1, col2 = st.columns([4, 1])
        
        with col1:
            st.text(result["text"])
        
        with col2:
            if st.button("üîÑ –ó–∞–Ω–æ–≤–æ", key=f"retry_{index}"):
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–±–∑–∞—Ü–∞
                with st.spinner("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞..."):
                    new_result = process_paragraph(result["text"], settings)
                    new_result['paragraph_index'] = index
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state
                    st.session_state.processing_results[index] = new_result
                    st.rerun()
        
        if result["queries"]:
            st.markdown("**üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**")
            for query in result["queries"]:
                st.code(query)
        else:
            st.warning("‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM.")
        
        if result["images"]:
            st.markdown("**üñºÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**")
            cols = st.columns(min(len(result["images"]), 4))
            
            for j, img in enumerate(result["images"]):
                with cols[j % 4]:
                    try:
                        st.image(img["url"], caption=f"–ó–∞–ø—Ä–æ—Å: {img['query']}")
                        st.caption(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {img['search_engine']}")
                    except:
                        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img['url']}")

if __name__ == "__main__":
    main()